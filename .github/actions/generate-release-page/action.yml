name: "🌐 Generate Release Page"
description: "Generate GitHub Pages for each release"

inputs:
  app-directory:
    description: "Directory containing the private repository"
    required: false
    default: "app"
  version:
    description: "Version string for the release"
    required: true
  commit-count:
    description: "Number of commits to show per branch"
    required: false
    default: "10"
  branches:
    description: "Comma-separated list of branches to include"
    required: false
    default: "dev,main"
  changelog:
    description: "Generated changelog content"
    required: true

outputs:
  page-url:
    description: "URL of the generated release page"
    value: ${{ steps.generate-page.outputs.page-url }}

runs:
  using: composite
  steps:
    - name: 🌐 Generate release page
      id: generate-page
      shell: bash
      run: |
        echo "Generating release page..."

        # 进入私有仓库目录获取信息
        cd ${{ inputs.app-directory }}/

        # 获取当前私有仓库的信息
        CURRENT_COMMIT=$(git rev-parse HEAD)
        CURRENT_COMMIT_SHORT=$(git rev-parse --short HEAD)
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

        # 获取远程仓库信息
        REMOTE_URL=$(git remote get-url origin)
        if [[ $REMOTE_URL == *"github.com"* ]]; then
          REPO_PATH=$(echo $REMOTE_URL | sed 's|.*github.com[/:]\([^/]*\/[^/]*\).*|\1|' | sed 's|\.git$||')
          GITHUB_BASE_URL="https://github.com/${REPO_PATH}"
        else
          REPO_PATH=""
          GITHUB_BASE_URL=""
        fi

        # 返回根目录
        cd ..

        # 获取触发信息
        TRIGGER_EVENT="${{ github.event_name }}"
        TRIGGER_REPO="${{ github.repository }}"
        TRIGGER_BRANCH="${{ github.ref_name }}"
        TRIGGER_COMMIT="${{ github.sha }}"
        TRIGGER_AUTHOR="${{ github.actor }}"

        # 获取release hash信息
        RELEASE_HASH="${{ github.sha }}"
        RELEASE_HASH_SHORT="${RELEASE_HASH:0:7}"

        # 获取提交消息（转义特殊字符）
        COMMIT_MESSAGE=""
        if [[ "${{ github.event_name }}" == "push" ]]; then
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
        elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
          COMMIT_MESSAGE="${{ github.event.client_payload.commit_message }}"
        fi
        # 转义特殊字符以避免 sed 错误
        COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed 's/[\/&]/\\&/g' | tr '\n' ' ' | tr '\r' ' ')

        # 创建发布目录 - 使用版本号（tag名称）作为路径，便于API获取
        # 清理版本号中的特殊字符，用于文件夹名
        VERSION_SAFE=$(echo "${{ inputs.version }}" | sed 's/[^a-zA-Z0-9.-]/_/g')
        RELEASE_DIR="pages/${VERSION_SAFE}"
        mkdir -p "$RELEASE_DIR"

        echo "Creating release page in: $RELEASE_DIR"
        echo "Version (tag): ${{ inputs.version }}"
        echo "Version (safe): $VERSION_SAFE"
        echo "Release Hash: $RELEASE_HASH"
        echo "Release Hash (short): $RELEASE_HASH_SHORT"
        echo "Private Commit: $CURRENT_COMMIT"

        # 获取当前时间
        CREATED_AT=$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')        # 构建产物将通过前端JavaScript动态获取，简化后端逻辑
        DOWNLOAD_FILES="[]"

        echo "📝 Release assets will be fetched dynamically by frontend JavaScript"
        echo "🔗 GitHub API endpoints:"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Version (tag): ${{ inputs.version }}"
        echo "  - Release Hash: $RELEASE_HASH"
        echo "  - API Base: https://api.github.com/repos/${{ github.repository }}"

        # 复制并处理模板文件
        cp pages/release-template.html "$RELEASE_DIR/index.html"

        # 设置环境变量供 Python 脚本使用
        export REPLACE_VERSION="${{ inputs.version }}"
        export REPLACE_CREATED_AT="$CREATED_AT"
        export REPLACE_COMMIT_HASH="$CURRENT_COMMIT"
        export REPLACE_PRIVATE_BRANCH="$CURRENT_BRANCH"
        export REPLACE_TRIGGER_EVENT="$TRIGGER_EVENT"
        export REPLACE_TRIGGER_REPO="$TRIGGER_REPO"
        export REPLACE_TRIGGER_BRANCH="$TRIGGER_BRANCH"
        export REPLACE_TRIGGER_COMMIT="$TRIGGER_COMMIT"
        export REPLACE_TRIGGER_AUTHOR="$TRIGGER_AUTHOR"
        export REPLACE_COMMIT_MESSAGE="$COMMIT_MESSAGE"
        export REPLACE_GITHUB_BASE_URL="$GITHUB_BASE_URL"
        export REPLACE_REPO_PATH="$REPO_PATH"
        export REPLACE_DOWNLOAD_FILES="$DOWNLOAD_FILES"
        # 添加前端API调用需要的参数
        export REPLACE_RELEASE_HASH="$RELEASE_HASH"
        export REPLACE_RELEASE_HASH_SHORT="$RELEASE_HASH_SHORT"

        # 将 changelog 写入临时文件以避免多行内容的问题
        CHANGELOG_FILE=$(mktemp)
        printf '%s' '${{ inputs.changelog }}' > "$CHANGELOG_FILE"
        export REPLACE_CHANGELOG_FILE="$CHANGELOG_FILE"

        # 使用外部 Python 脚本处理模板替换
        python3 ./.github/actions/generate-release-page/process_template.py "$RELEASE_DIR"

        # 清理临时文件
        rm -f "$CHANGELOG_FILE"

        # 更新 releases.json
        echo "Updating releases.json..."
        if [[ ! -f "pages/releases.json" ]]; then
          echo '{"releases":[]}' > pages/releases.json
        fi

        # 安装 jq 如果不存在
        if ! command -v jq >/dev/null 2>&1; then
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
        fi

        # 创建新的发布记录
        NEW_RELEASE=$(jq -n \
          --arg version "${{ inputs.version }}" \
          --arg commit_hash "$CURRENT_COMMIT" \
          --arg release_hash "$RELEASE_HASH" \
          --arg release_hash_short "$RELEASE_HASH_SHORT" \
          --arg created_at "$CREATED_AT" \
          --arg branch "$CURRENT_BRANCH" \
          --arg trigger_event "$TRIGGER_EVENT" \
          --arg trigger_repo "$TRIGGER_REPO" \
          --arg trigger_branch "$TRIGGER_BRANCH" \
          --arg trigger_commit "$TRIGGER_COMMIT" \
          --arg trigger_author "$TRIGGER_AUTHOR" \
          --arg commit_message "$COMMIT_MESSAGE" \
          --arg github_base_url "$GITHUB_BASE_URL" \
          --arg repo_path "$REPO_PATH" \
          --arg status "success" \
          '{
            version: $version,
            commit_hash: $commit_hash,
            release_hash: $release_hash,
            release_hash_short: $release_hash_short,
            created_at: $created_at,
            branch: $branch,
            private_branch: $branch,
            trigger_event: $trigger_event,
            trigger_repo: $trigger_repo,
            trigger_branch: $trigger_branch,
            trigger_commit: $trigger_commit,
            trigger_author: $trigger_author,
            commit_message: $commit_message,
            status: $status,
            github_base_url: $github_base_url,
            repo_path: $repo_path
          }')

        # 检查是否已存在相同版本的记录
        EXISTING=$(jq --arg version "${{ inputs.version }}" '.releases[] | select(.version == $version)' pages/releases.json)
        if [[ -z "$EXISTING" ]]; then
          # 添加到 releases.json（保留最近50个）
          jq --argjson new_release "$NEW_RELEASE" '.releases |= [($new_release)] + .[0:49]' pages/releases.json > pages/releases.json.tmp
          mv pages/releases.json.tmp pages/releases.json
          echo "Added new release: ${{ inputs.version }}"
        else
          echo "Release for version ${{ inputs.version }} already exists, updating existing record"
          # 更新现有记录
          jq --argjson new_release "$NEW_RELEASE" '.releases = [($new_release)] + (.releases | map(select(.version != ($new_release.version))))' pages/releases.json > pages/releases.json.tmp
          mv pages/releases.json.tmp pages/releases.json
        fi

        # 输出页面 URL - 使用版本号（tag名称）作为路径
        REPO_NAME=$(basename "${{ github.repository }}")
        if [[ -n "${{ github.repository }}" ]]; then
          PAGE_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}/${VERSION_SAFE}/"
        else
          PAGE_URL="/${VERSION_SAFE}/"
        fi

        echo "page-url=$PAGE_URL" >> $GITHUB_OUTPUT
        echo "Generated release page: $PAGE_URL"
        echo "Files created:"
        ls -la "$RELEASE_DIR/"
        echo "Updated releases.json"
