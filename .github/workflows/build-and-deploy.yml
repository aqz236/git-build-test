name: 🚀 NextJS Static Deploy

# 📊 配置参数
env:
  NODE_VERSION: "20"
  BUN_VERSION: "latest"

on:
  push:
    branches:
      - main
      - dev
  repository_dispatch:
    types: [build]
  workflow_dispatch:
    inputs:
      deploy_branch:
        description: "部署分支 (main/dev)"
        required: true
        default: "main"
        type: choice
        options:
          - main
          - dev

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: elysiajs-rapid
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 使用您原有的方式克隆私有仓库
      - name: 📥 Clone private repository
        run: |
          # 使用您在 elysiajs-rapid 环境中配置的方式
          REPO_URL="${{ secrets.REPOSITORY_URL }}"
          if [[ $REPO_URL == https://github.com/* ]]; then
            # 从完整URL中提取 owner/repo
            REPO_PATH=$(echo $REPO_URL | sed 's|https://github.com/||' | sed 's|\.git$||')
          else
            # 已经是 owner/repo 格式
            REPO_PATH=$REPO_URL
          fi

          echo "Cloning repository: $REPO_PATH"
          git clone https://${{ secrets.SELF_GITHUB_SECRETS }}@github.com/${REPO_PATH}.git app/
          cd app/
          git fetch --all --tags

      # 设置 Node.js 环境
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # 设置 Bun 环境
      - name: 🥖 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      # 安装依赖
      - name: 📦 Install dependencies
        working-directory: ./app
        run: bun install --frozen-lockfile

      # 构建 NextJS 静态站点
      - name: 🔨 Build NextJS
        working-directory: ./app
        run: |
          echo "Building NextJS application..."
          bun run build

      # 导出静态文件
      - name: 📤 Export static files
        working-directory: ./app
        run: |
          echo "Exporting static files..."
          # 检查是否有 out 目录（静态导出）
          if [ -d "out" ]; then
            echo "Found 'out' directory from static export"
            cp -r out/* ../dist/
          elif [ -d ".next" ]; then
            echo "Found '.next' directory, copying build output"
            mkdir -p ../dist
            cp -r .next/static ../dist/_next/
            # 如果有其他静态资源
            if [ -d "public" ]; then
              cp -r public/* ../dist/
            fi
          else
            echo "No build output found"
            exit 1
          fi

      # 配置 GitHub Pages
      - name: 🌐 Setup Pages
        uses: actions/configure-pages@v4

      # 上传构建产物
      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      # 部署到 GitHub Pages
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 确定版本号
      - name: 🏷️ Determine version
        id: version
        uses: ./.github/actions/generate-version
        with:
          app-directory: app

      # 生成 changelog
      - name: 📋 Generate changelog
        id: changelog
        uses: ./.github/actions/generate-changelog
        with:
          app-directory: app
          version: ${{ steps.version.outputs.version }}
          commit-count: 10
          branches: "dev,main"

      # 创建 GitHub Release（确保有release assets可以获取）
      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Release ${{ steps.version.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ steps.version.outputs.is-prerelease }}
          draft: false
          files: |
            app-${{ steps.version.outputs.version }}-*.7z
            *.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # 允许失败，因为可能没有构建产物

      # 输出结果
      - name: 📊 Output results
        run: |
          echo "## 🎉 发布完成!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 变更日志预览" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changelog.outputs.changelog }}" | head -20 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 可选：通知步骤
  notify:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: 📢 Notify completion
        run: |
          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "✅ 发布成功完成"
          else
            echo "❌ 发布失败"
          fi
